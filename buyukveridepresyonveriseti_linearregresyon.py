# -*- coding: utf-8 -*-
"""BuyukVeriDepresyonVeriSeti_LinearRegresyon.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17i0E89kDmAXla4dGf5oVWp6xGytxqYhP
"""

import pandas as pd
import numpy as np
import os
from sklearn.svm import SVR
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Lasso, LinearRegression
from sklearn.metrics import r2_score

avg_dict1 = {}

for file in os.listdir("/content/drive/MyDrive/data/condition"):
    df = pd.read_csv("/content/drive/MyDrive/data/condition" + "/" + file)
    avg_dict1[file.split(".")[0]] = df.activity.mean()

avg_dict1

avg_dict2 = {}

for file in os.listdir("/content/drive/MyDrive/data/control"):
    df = pd.read_csv("/content/drive/MyDrive/data/control" + "/" + file)
    avg_dict2[file.split(".")[0]] = df.activity.mean()

avg_dict2

avgs1 = pd.DataFrame(pd.Series(avg_dict1))
avgs1.columns = ["Avg"]
avgs1

avgs2 = pd.DataFrame(pd.Series(avg_dict2))
avgs2.columns = ["Avg"]
avgs2

scoresData = pd.read_csv("/content/drive/MyDrive/data/scores.csv")
scoresData.head()

# prompt: scoresData'dan afftype, melanch, inpatient, edu, marriage, work sütunlarını kaldır

scoresData = scoresData.drop(['afftype', 'melanch', 'inpatient', 'edu', 'marriage', 'work'], axis=1)
scoresData.head()

from matplotlib import pyplot as plt
scoresData['days'].plot(kind='hist', bins=20, title='days')
plt.gca().spines[['top', 'right',]].set_visible(True)

conditionsData = scoresData[scoresData.number.str.startswith("condition")]
conditionsData.head()

controlsData = scoresData[scoresData.number.str.startswith("control")]
controlsData.head()

conditionsData = conditionsData.set_index("number").join(avgs1).reset_index()
conditionsData.head()

controlsData = controlsData.set_index("number").join(avgs2).reset_index()
controlsData.head()

combinedData = pd.concat([conditionsData, controlsData])

combinedData.reset_index(inplace=True)
combinedData.index += 1
combinedData.drop(columns=['index'], inplace=True)
combinedData.head()

# from sklearn.linear_model import LinearRegression

# MADRS puanları
madrs_scores = []
madrs1 = []
madrs2 = []

for row in combinedData.itertuples():
    if row.number.split('_')[0] == 'condition':
        madrs_scores.append([row.madrs1, row.madrs2])
        madrs1.append([row.madrs1])
        madrs2.append([row.madrs2])

madrs_scores = np.array(madrs_scores)
madrs1 = np.array(madrs1)
madrs2 = np.array(madrs2)

madrs_scores, madrs1, madrs2

# Regresyon modeli
linreg_mards1 = LinearRegression()
linreg_mards2 = LinearRegression()

# avg_array1 = np.array(list(avg_dict1.values())).reshape(-1, 1)
# avg_array2 = np.array(list(avg_dict2.values())).reshape(-1, 1)

avg_dict1_list = list(avg_dict1.values())
avg_dict1_array = np.array(avg_dict1_list).reshape(-1, 1)

# Eğitim
linreg_mards1.fit(avg_dict1_array, madrs_scores[:, 0]) # (x_train, y_train1)
linreg_mards2.fit(avg_dict1_array, madrs_scores[:, 1]) # (x_train, y_train2)

avg_dict2_list = list(avg_dict2.values())
avg_dict2_array = np.array(avg_dict2_list).reshape(-1, 1)

linreg_predicted_mards1 = linreg_mards1.predict(avg_dict2_array) # (x_test)
linreg_predicted_mards2 = linreg_mards2.predict(avg_dict2_array)

# Tahminleri göster
for i, (m1, m2) in enumerate(zip(linreg_predicted_mards1, linreg_predicted_mards2)):
    print(f"Control {i+1}: Predicted MADRS1 = {m1:.2f}, Predicted MADRS2 = {m2:.2f}")

# 0 ila 6: Normal/Semptom yok
# # 7'den 19'a: Hafif Depresyon
# # 20 ila 34: Orta Derecede Depresyon
# # 35 ila 60: Şiddetli Depresyon

for i, (m1, m2) in enumerate(zip(linreg_predicted_mards1, linreg_predicted_mards2)):
    if m1 <= 6 and m2 <= 6:
        print(f"Control {i+1}: Normal/Semptom yok")
    elif 7 <= m1 <= 19 and 7 <= m2 <= 19:
        print(f"Control {i+1}: Hafif Depresyon")
    elif 20 <= m1 <= 34 and 20 <= m2 <= 34:
        print(f"Control {i+1}: Orta Derecede Depresyon")
    elif 35 <= m1 <= 60 and 35 <= m2 <= 60:
        print(f"Control {i+1}: Şiddetli Depresyon")

# Plotting both real and predicted MADRS1 and MADRS2 on the same graph
plt.figure(figsize=(12, 6))
plt.scatter(avg_dict2_list, linreg_predicted_mards1, color='red', label='Tahmin Edilen MADRS1')
plt.scatter(avg_dict2_list, linreg_predicted_mards2, color='orange', label='Tahmin Edilen MADRS2')
plt.title('Tahmin Edilen MADRS Puanları')
plt.xlabel('Ortalama Aktivite')
plt.ylabel('MADRS Puanları')
plt.legend()
plt.show()

r2 = r2_score(avg_dict2_array[:23], madrs_scores[:, 0])

print("R2: ", r2*100)