# -*- coding: utf-8 -*-
"""BuyukVeriDepresyonRandomForestRegressor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wblzck08SXYILwRqMYrdjTtEiKfYIpjU
"""

import pandas as pd
import os
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

condition_dir = '/content/drive/MyDrive/data/condition/'
control_dir = '/content/drive/MyDrive/data/control/'

condition_files = []
control_files = []

for file in os.listdir(condition_dir):
  condition_files.append(condition_dir + file)

i = 1
for file in os.listdir(control_dir):
  if(i<=23):
    control_files.append(control_dir + file)
    i += 1

len(control_files)

scores = pd.read_csv('/content/drive/MyDrive/data/scores.csv')

# Ortalama aktiviteleri depolamak için
condition_avg_activities = {}
control_avg_activities = {}

# Her koşul dosyası için ortalama aktivite
for file in condition_files:
    file_path = os.path.join(condition_dir, file)
    data = pd.read_csv(file_path)
    avg_activity = data['activity'].mean()
    condition_avg_activities[file.replace(condition_dir, '').replace('.csv', '')] = avg_activity

# Her kontrol dosyası için ortalama aktivite
for file in control_files:
    file_path = os.path.join(control_dir, file)
    data = pd.read_csv(file_path)
    avg_activity = data['activity'].mean()
    control_avg_activities[file.replace(control_dir, '').replace('.csv', '')] = avg_activity

# scores datasına ortalama aktivitelerin eklenmesi
def get_avg_activity(number):
    if number in condition_avg_activities:
        return condition_avg_activities[number]
    elif number in control_avg_activities:
        return control_avg_activities[number]
    else:
        return None

scores['avg_activity'] = scores['number'].apply(get_avg_activity)
scores

# Eğitim için özellikler ve hedefler
features = ['avg_activity', 'days', 'gender', 'age']
training_data = scores[scores['madrs1'].notnull() & scores['madrs2'].notnull()]
testing_data = scores[scores['madrs1'].isnull() & scores['madrs2'].isnull()]

# kategorik özellikleri sayısala dönüştürülmesi
training_data['age'] = training_data['age'].astype('category').cat.codes
testing_data['age'] = testing_data['age'].astype('category').cat.codes

# eğitim için özelliklerin ve hedefin verilmesi
X_train = training_data[features]
y_train = training_data['madrs1']

# Eksik değerlerin sütun ortalamalarıyla doldurulması
imputer = SimpleImputer(strategy='mean')
X_train_imputed = imputer.fit_transform(X_train)

# özelliklerin standardizasyonu, ölçeklendirilmesi
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train_imputed)

# Modelin başlatılması ve eğitimi
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train_scaled, y_train)

# test verilerinin hazırlanması
X_test = testing_data[features]
X_test_imputed = imputer.transform(X_test)
X_test_scaled = scaler.transform(X_test_imputed)

# control verileri için MADRS puanının tahmini
rf_predictions = rf_model.predict(X_test_scaled)

# test verilerine tahminlerin eklenmesi
testing_data['predicted_madrs1'] = rf_predictions

# Eğitim verilerindeki model performansının değerlendirilmesi
y_train_rf_pred = rf_model.predict(X_train_scaled)
mse_rf = mean_squared_error(y_train, y_train_rf_pred)
r2_rf = r2_score(y_train, y_train_rf_pred)

# Model performans ölçümlerini ve tahmin edilen sonuçların görüntülenmesi
print(f"Mean Squared Error (MSE): {mse_rf}")
print(f"R-squared (R²): {r2_rf}")

print(testing_data[['number', 'avg_activity', 'days', 'gender', 'age', 'predicted_madrs1']])

# Tahmin edilen MADRS puanları ile gerçek MADRS puanlarını karşılaştıran scatter plot
plt.figure(figsize=(10, 6))
plt.scatter(y_train, y_train_rf_pred, alpha=0.5)
plt.plot([y_train.min(), y_train.max()], [y_train.min(), y_train.max()], 'r--', lw=2)
plt.xlabel('Gerçek MADRS Puanları')
plt.ylabel('Tahmin Edilen MADRS Puanları')
plt.title('Gerçek ve Tahmin Edilen MADRS Puanlarının Karşılaştırılması')
plt.show()

# Model hatalarının dağılımını gösteren histogram
errors = y_train - y_train_rf_pred

plt.figure(figsize=(10, 6))
sns.histplot(errors, bins=20, kde=True)
plt.xlabel('Hata (Gerçek - Tahmin)')
plt.ylabel('Frekans')
plt.title('Model Hatalarının Dağılımı')
plt.show()

# Testing verisi için tahmin edilen MADRS puanlarının dağılımı
# modelin tahminlerinin genel dağılımını anlamaya yardımcı olur.
plt.figure(figsize=(10, 6))
sns.histplot(testing_data['predicted_madrs1'], bins=20, kde=True)
plt.xlabel('Tahmin Edilen MADRS Puanları')
plt.ylabel('Frekans')
plt.title('Testing Verisi için Tahmin Edilen MADRS Puanlarının Dağılımı')
plt.show()